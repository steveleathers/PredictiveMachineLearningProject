swirl()
library(swirl)
swirl()
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
swirl()
library(swirl)
swirl()
lm(Fertility ~ ., data=swiss)
all <-lm(Fertility ~ ., data=swiss)
summary(all)
library(swirl)
swirl()
library(MASS)
?shuttle
shuttle
shut = shuttle
View(shut)
shut$use = factor(shut$use)
1350^222
222^1350
222^500
222^50
swirl()
library(swirl)
swirl()
1-(3/36)
deck
1/52
52
1/13
0
12/52
3/51
2/51
library(devtools)
install_github("jennybc/gapminder")
library(gapminder)
data(gapminder)
head(gapminder)
fiftytwo = gapminder[year=='1952']
fiftytwo = gapminder[gapminder$year=='1952']
fiftytwo = gapminder[gapminder$year==1952]
fiftytwo = gapminder[gapminder$year==1952,]
View(fiftytwo)
hist(fiftytwo)
hist(fiftytwo$lifeExp)
mean(fiftytwo$lifeExp)
mean(fiftytwo$lifeExp)<=40
40/mean(fiftytwo$lifeExp)
?ecdf
ecdf(fiftytwo$lifeExp <=40)
unique(fiftytwo$lifeExp <=40)
count(fiftytwo$lifeExp <=40)
fiftytwo$lifeExp <=40
table(fiftytwo$lifeExp <=40)
41/142
table(fiftytwo$lifeExp <=60)
(107/142)-0.2887324
prop = function(q) {
mean(x <= q)
}
qs = seq(from=min(x), to=max(x), length=20)
q=prop(40)
props = sapply(qs, function(q) mean(x <= q))
devtools::install_github("joyofdata/RTwitterAPI")
library(RTwitterAPI)
params <- c(
"oauth_consumer_key"     = "[API Key]",
"oauth_nonce"            = NA,
"oauth_signature_method" = "HMAC-SHA1",
"oauth_timestamp"        = NA,
"oauth_token"            = "[Access Token]",
"oauth_version"          = "1.0",
"consumer_secret"        = "[API Secret]",
"oauth_token_secret"     = "[Access Token Secret]"
);
url   <- "https://api.twitter.com/1.1/friends/ids.json";
query <- c(cursor=-1, screen_name="steveleathers", count=10);
result <- RTwitterAPI::twitter_api_call(url, query, params)
params <- c(
"oauth_consumer_key"     = "s2VRwC3s2BNxLwyCNF1s2YfZ6",
"oauth_nonce"            = NA,
"oauth_signature_method" = "HMAC-SHA1",
"oauth_timestamp"        = NA,
"oauth_token"            = "209909446-XLeY3LHnZG3eIfDILxwDIFmXdTIdMIAEbLoeTPjU",
"oauth_version"          = "1.0",
"consumer_secret"        = "CpuW8RGWSZ1GHNOj6yOgZ2vGT2kC7HYhc0VNgEZr3t2GSKYtjA",
"oauth_token_secret"     = "XB195uPfy9rlDpPtktX7jyV9IzhajcXDdRlrWBf9CjzEe"
);
url   <- "https://api.twitter.com/1.1/friends/ids.json";
query <- c(cursor=-1, screen_name="steveleathers", count=10);
result <- RTwitterAPI::twitter_api_call(url, query, params)
url   <- "https://api.twitter.com/1.1/friends/ids.json";
query <- c(cursor=-1, screen_name="steveleathers", count=10);
result <- RTwitterAPI::twitter_api_call(url, query, params)
jsonlite::prettify(result)
sqrt(151.3)
setwd("~/Dropbox")
?load_tweets_db
library(twitteR)
?load_tweets_db
load_tweets_db("output.txt")
twListToDF("output.txt")
?twListToDF
twlist = read.table("output.txt")
twlist = read.table("output.txt", StringsAsFactors=FALSE)
twlist = read.table("output.txt", sep=",")
library(rjson)
tweets = fromJSON(paste(readLines("output.txt"), collapse=""))
twListToDF(tweets)
app_name <- "RAnalyzer"
client_id <- "7b3d50df85324a7db420b41b1c83010f"
client_secret <- "23a1a77861e14fd7a8519d8b24a7dffb"
scope = "basic"
instagram <- oauth_endpoint(
authorize = "https://api.instagram.com/oauth/authorize",
access = "https://api.instagram.com/oauth/access_token")
myapp <- oauth_app(app_name, client_id, client_secret)
require(httr)
instagram <- oauth_endpoint(
authorize = "https://api.instagram.com/oauth/authorize",
access = "https://api.instagram.com/oauth/access_token")
myapp <- oauth_app(app_name, client_id, client_secret)
ig_oauth <- oauth2.0_token(instagram, myapp,scope="basic",  type = "application/x-www-form-urlencoded",cache=FALSE)
tmp <- strsplit(toString(names(ig_oauth$credentials)), '"')
token <- tmp[[1]][4]
user_info <- fromJSON(getURL(paste('https://api.instagram.com/v1/users/search?q=',username,'&access_token=',token,sep="")),unexpected.escape = "keep")
username="baseballdad"
user_info <- fromJSON(getURL(paste('https://api.instagram.com/v1/users/search?q=',username,'&access_token=',token,sep="")),unexpected.escape = "keep")
received_profile <- user_info$data[[1]]
received_profile
user_id <- received_profile$id
#Get recent media (20 pictures)
media <- fromJSON(getURL(paste('https://api.instagram.com/v1/users/',user_id,'/media/recent/?access_token=',token,sep="")))
media <- fromJSON(getURL(paste('https://api.instagram.com/v1/users/',user_id,'/media/recent/?access_token=',token,sep="")))
taken
token
df = data.frame(no = 1:length(media$data))
for(i in 1:length(media$data))
{
#comments
df$comments[i] <-media$data[[i]]$comments$count
#likes:
df$likes[i] <- media$data[[i]]$likes$count
#date
df$date[i] <- toString(as.POSIXct(as.numeric(media$data[[i]]$created_time), origin="1970-01-01"))
}
user_id <- received_profile$id
media <- fromJSON(getURL(paste('https://api.instagram.com/v1/users/',user_id,'/media/recent/?access_token=',token,sep="")))
user_id
media = fromJson(getUrl('https://api.instagram.com/v1/users/5956076/media/recent/?access_token=5956076.7b3d50d.ea5792c722f14415b3b8ff1d046a82db'))
media = fromJSON(getUrl('https://api.instagram.com/v1/users/5956076/media/recent/?access_token=5956076.7b3d50d.ea5792c722f14415b3b8ff1d046a82db'))
media = fromJSON(getURL('https://api.instagram.com/v1/users/5956076/media/recent/?access_token=5956076.7b3d50d.ea5792c722f14415b3b8ff1d046a82db'))
media = fromJSON(getURL(gsub('\\_','\_',https://api.instagram.com/v1/users/5956076/media/recent/?access_token=5956076.7b3d50d.ea5792c722f14415b3b8ff1d046a82db')))
sql_lite_file = tempfile()
register_sqlite_backend(sql_lite_file)
packages()
helpstart()
help_start()
help()
library(RTextTools)
install.packages("RTextTools")
install.packages("RTextTools")
setwd("~/datasci/PredictiveMachineLearningProject")
test = read.csv("pml-testing.csv")
train=read.csv("pml-training.csv")
str(train)
library(caret)
library(Caret)
install.packages("caret")
library(kernlab)
install.packages("kernlab")
library(kernlab)
install.packages("caret", dependencies = c("Depends", "Suggests"))
library(caret)
library(mlbench)
data(Sonar)
set.seed(107)
inTrain <- createDataPartition(y=Sonar$Class, p=0.75, list=FALSE)
str(inTrain)
training = Sonar[inTrain,]
testing = Sonar-[inTrain,]
testing = Sonar[-inTrain,]
nrow(training)
nrow(testing)
plsFit <- train(Class~., data=training, method="pls", preProc=c("center", "scale"))
plsFit <- train(Class~., data=training, method="pls", tuneLength=15, preProc=c("center", "scale"))
plsFit <- train(Class~., data=training, method="pls", tuneLength=15, trControl = ctrl, preProc=c("center", "scale"))
ctrl <- trainControl(method = "repeatedcv",repeats = 3)
plsFit <- train(Class~., data=training, method="pls", tuneLength=15, trControl = ctrl, preProc=c("center", "scale"))
summary(plsFit)
ctrl <- trainControl(method = "repeatedcv", repeats = 3, classProbs = TRUE, summaryFunction = twoClassSummary)
plsFit <- train(Class~., data=training, method="pls", tuneLength=15, trControl = ctrl, metric = "ROC", preProc=c("center", "scale"))
plsFit
summary(pslFit$ROC)
summary(plsFit$ROC)
mean(plsFit$ROC)
plot(plsFitit)
plot(plsFit)
plsClasses = predict(plsFit, newdata=testing)
str(plsClasses)
plsProbs = predict(plsFit, newdata=testing, type=prob)
plsProbs = predict(plsFit, newdata=testing, type="prob")
plsProbs
confusionMatrix(plsClasses, testing$Class)
